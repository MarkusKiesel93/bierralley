#!/usr/bin/env python3

from pathlib import Path
import subprocess as sp
import argparse as ap
import yaml
import sys

REPO_PATH = Path(__file__).parent.resolve()
CONFIGS = REPO_PATH / 'configs.yml'
SECRET_CONFIGS = REPO_PATH.parent / 'secret_configs.yml'
DOCKER_ENV_FILE = REPO_PATH / '.env'
VUE_ENV_FILE = REPO_PATH / 'frontend' / '.env'


# return one dict with all configs for deploy_mode
def load_configs(deploy_mode):
    configs = {}
    configs['deploy_mode'] = deploy_mode

    with open(CONFIGS, 'r') as cfg_file:
        cfg = yaml.safe_load(cfg_file)
    for config in cfg['general']:
        configs[config] = cfg["general"][config]
    for config in cfg[deploy_mode]:
        configs[config] = cfg[deploy_mode][config]
    return configs


def run_production(configs):
    print(f'RUN PRODUCTION SERVER FOR: {configs["project_name"]}')
    create_env_files(configs)
    create_env_secrets(configs)
    create_nginx_conf(configs)
    sp.run(['docker-compose', '--env-file', '.env', 'up', '--build', '--detach'])


def run_development(configs):
    print(f'RUN DEVELOPMENT SERVER FOR: {configs["project_name"]}')
    create_env_files(configs)
    create_env_secrets(configs)
    create_nginx_conf(configs)
    sp.run(['npm', 'install'], cwd='./frontend/')
    sp.run(['docker-compose', '--file', 'docker-compose.dev.yml', '--env-file', '.env', 'up', '--build'])


def run_backend(configs):
    print(f'RUN BACKEND FOR: {configs["project_name"]}')
    create_env_files(configs)
    create_env_secrets(configs)
    create_nginx_conf(configs)
    sp.run(['docker-compose', '--file', 'docker-compose.backend.yml', '--env-file', '.env', 'up', '--build'])


def run_frontend(configs):
    print(f'RUN FRONTEND FOR: {configs["project_name"]}')
    create_env_files(configs)
    create_env_secrets(configs)
    create_nginx_conf(configs)
    sp.run(['docker-compose', '--file', 'docker-compose.frontend.yml', '--env-file', '.env', 'up', '--build'])


def stop_containers(configs):
    print(f'STOP CONTAINERS FOR: {configs["project_name"]}')
    containers = ['frontend', 'server', 'backend']
    for container in containers:
        sp.run(['docker', 'container', 'stop', f'{configs["project_name"]}_{container}'])


def create_env_files(configs):
    # environment file to use with docker
    with open(DOCKER_ENV_FILE, 'w') as env_file:
        for config, value in configs.items():
            env_file.write(f'{config.upper()}={value}\n')

    # environment file to use with vue
    # 'VUE_APP_' needed to be used by process.env
    # todo: is there a better way to do this ?
    with open(VUE_ENV_FILE, 'w') as env_file:
        for config, value in configs.items():
            env_file.write(f'VUE_APP_{config.upper()}={value}\n')


def create_env_secrets(configs):
    # secret configs for mail and secret keys
    with open(SECRET_CONFIGS, 'r') as cfg_file:
        cfg = yaml.safe_load(cfg_file)
        cfg = cfg[configs['project_name']][configs['deploy_mode']]
    with open(DOCKER_ENV_FILE, 'a') as env_file:
        for config, value in cfg.items():
            env_file.write(f'{config.upper()}={value}\n')


def create_nginx_conf(configs):
    for service in ['backend', 'frontend']:
        for template_file in (REPO_PATH / service / 'deploy').glob(f'**/*nginx.conf_{configs["deploy_mode"]}'):
            fill_template(configs, template_file)


def fill_template(configs, template_file):
    with open(template_file, 'r') as t_file:
        template = t_file.read()
        for config, value in configs.items():
            template = template.replace(f'{{{{{config}}}}}', str(value))
    with open(template_file.parent / 'nginx.conf', 'w') as new_file:
        new_file.write(template)


if __name__ == "__main__":
    parser = ap.ArgumentParser(prog='Run Webpage', description='Script to run development or production server')
    parser.add_argument('-dev', '--development', action='store_true', help='run development server')
    parser.add_argument('-prod', '--production', action='store_true', help='run production server')
    parser.add_argument('-b', '--backend', action='store_true', help='run backend seperately')
    parser.add_argument('-f', '--frontend', action='store_true', help='run frontend seperately')
    parser.add_argument('-s', '--stop', action='store_true', help='stop all docker containers')

    args = parser.parse_args()
    num_args = sum(vars(args).values())

    if num_args == 0:
        print('Select at least one option.')
    elif num_args > 1:
        print('Select only one option.')
    elif args.production:
        try:
            configs = load_configs('production')
            run_production(configs)
        except KeyboardInterrupt:
            print('shutting down production server')
            sys.exit(1)
    elif args.development:
        try:
            configs = load_configs('development')
            run_development(configs)
        except KeyboardInterrupt:
            print('shutting down development server')
            sys.exit(1)
    elif args.backend:
        try:
            configs = load_configs('development')
            run_backend(configs)
        except KeyboardInterrupt:
            print('shutting down backend')
            sys.exit(1)
    elif args.frontend:
        try:
            configs = load_configs('development')
            run_frontend(configs)
        except KeyboardInterrupt:
            print('shutting down frontend')
            sys.exit(1)
    elif args.stop:
        try:
            configs = load_configs('development')
            stop_containers(configs)
        except KeyboardInterrupt:
            print('Exit with Strg+c')
            sys.exit(1)
